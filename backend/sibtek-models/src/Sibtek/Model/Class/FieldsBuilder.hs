-- Author: Viacheslav Lotsmanov
-- License: AGPLv3

{-# LANGUAGE TemplateHaskell #-}

module Sibtek.Model.Class.FieldsBuilder
     ( buildModelDataType
     ) where

import           Data.Typeable
import           Data.Either (either)

import           Control.Arrow ((&&&))

import qualified Language.Haskell.TH as TH
import           Language.Haskell.TH.Syntax as TH (VarBangType)
import           Language.Haskell.Meta.Parse (parseType)

import           Sibtek.Sugar
import           Sibtek.Model.Class.Fields


-- This helps to produce a data-type for a model by field spec.
-- This also defines partial version of constructor, consider this example:
--
--   type FooModelSpec
--     = IdentityField
--     ‚ä≥ ModelField "foo" Text         "foo_db_field"
--     ‚ä≥ ModelField "bar" (Maybe Text) "bar_db_field"
--
--   $(buildModelDataType "FooModel" (Proxy ‚à∑ Proxy FooModelSpec))
--
-- Will give you:
--
--   data FooModel
--     = FooModel { foo ‚à∑ Text, bar ‚à∑ Maybe Text }
--     | FooModelPartial { fooPartial ‚à∑ Maybe Text, barPartial ‚à∑ Maybe (Maybe Text) }
--
-- You could see that every partial version of a field wrapped with `Maybe`.
buildModelDataType ‚à∑ ModelFieldTH spec ‚áí String ‚Üí Proxy spec ‚Üí TH.DecsQ
buildModelDataType ((TH.mkName &&& TH.mkName ‚àò (‚ß∫ "Partial")) ‚Üí (name, namePartial)) fieldsSpec
  = pure [TH.DataD [] name [] Nothing constructors []]
  where
    fields        = modelFieldTH False fieldsSpec
    fieldsPartial = modelFieldTH True  fieldsSpec

    constructors  = [ TH.RecC name        fields
                    , TH.RecC namePartial fieldsPartial
                    ]


class ModelFieldTH a where
  modelFieldTH ‚à∑ ùîπ ‚Üí Proxy a ‚Üí [TH.VarBangType]

instance (Typeable t, KnownSymbol n, KnownSymbol d) ‚áí ModelFieldTH (ModelField n t d) where
  modelFieldTH isPartial Proxy = (:[])
    ( TH.mkName $ [qm| {symbolVal (Proxy ‚à∑ Proxy n)}{isPartial ? "Partial" $ "" ‚à∑ String} |]
    , bangPlug
    , either error id $ parseType $ [qm| {isPartial ? "Maybe (" $ "" ‚à∑ String}
                                         {typeOf (undefined ‚à∑ t)}
                                         {isPartial ? ")" $ "" ‚à∑ String} |]
    )

instance (ModelFieldTH a, ModelFieldTH b) ‚áí ModelFieldTH (a ‚ä≥ b) where
  modelFieldTH isPartial Proxy
    = modelFieldTH isPartial (Proxy ‚à∑ Proxy a)
    ‚ß∫ modelFieldTH isPartial (Proxy ‚à∑ Proxy b)


bangPlug ‚à∑ TH.Bang
bangPlug = TH.Bang TH.NoSourceUnpackedness TH.NoSourceStrictness
