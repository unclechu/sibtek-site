-- Author: Viacheslav Lotsmanov
-- License: AGPLv3

-- Only one module which whole export supposed to be imported implicitly.
-- So if you see any unknown type/function/operator it probably was declared here.

module Sibtek.Sugar
     ( module Prelude.Unicode
     , module GHC.TypeLits
     , module Data.Proxy
     , module Control.Monad
     , Generic
     , type ùîπ
     , type (‚Ä£), type (‚Ä°), (‚Ä°), (‚àµ), (‚à¥), (‚à¥?), (‚à¥!)
     , (‚Ä¢), (&), (<&>), (|?|), (?), (‚ãÑ)
     , ifMaybe, ifMaybeM, ifMaybeM'
     , applyIf, applyUnless
     , dupe
     , hexStr
     , qm, qms, qmb
     , qn, qns, qnb
     , myToJSON
     ) where

import           Prelude.Unicode
import           GHC.Generics (Generic, Rep)
import           GHC.TypeLits

import           Data.Proxy
import           Data.Monoid (type Monoid, (<>))
import           Data.Aeson ((.:), (.:?), (.:!), genericToJSON, defaultOptions)

import           Data.Aeson.Types ( type Parser
                                  , type Object
                                  , type Value
                                  , type FromJSON
                                  , type GToJSON
                                  , type Zero
                                  , Options ( sumEncoding
                                            , allNullaryToStringTag
                                            , constructorTagModifier
                                            )
                                  , SumEncoding (UntaggedValue)
                                  , emptyObject
                                  )

import           Data.Text (type Text)
import           Data.Function ((&))
import           Data.Bool (bool)
import           Data.ByteString.Char8 (type ByteString)
import qualified Data.ByteString.Char8 as BS
import           Text.Printf (printf)

import           Text.InterpolatedString.QM ( qm, qms, qmb
                                            , qn, qns, qnb
                                            )

import           Control.Monad ((>=>), (<=<), guard)

import           Servant ((:>), (:<|>) ((:<|>)), Context ((:.)))


type ùîπ = Bool

type (‚Ä£) = (:>)
infixr 9 ‚Ä£

type (‚Ä°) = (:<|>)
(‚Ä°) ‚à∑ a ‚Üí b ‚Üí a :<|> b
(‚Ä°) = (:<|>)
infixr 8 ‚Ä°

(‚àµ) ‚à∑ x ‚Üí Context xs ‚Üí Context (x : xs)
(‚àµ) = (:.)
infixr 5 ‚àµ

(‚à¥) ‚à∑ FromJSON a ‚áí Object ‚Üí Text ‚Üí Parser a
(‚à¥) = (.:)
(‚à¥?) ‚à∑ FromJSON a ‚áí Object ‚Üí Text ‚Üí Parser (Maybe a)
(‚à¥?) = (.:?)
(‚à¥!) ‚à∑ FromJSON a ‚áí Object ‚Üí Text ‚Üí Parser (Maybe a)
(‚à¥!) = (.:!)

-- See README.md
(‚Ä¢) ‚à∑ (a ‚Üí b) ‚Üí (b ‚Üí c) ‚Üí a ‚Üí c
(‚Ä¢) = flip (‚àò)
{-# INLINE (‚Ä¢) #-}
infixl 9 ‚Ä¢

-- See README.md
(<&>) ‚à∑ Functor f ‚áí f a ‚Üí (a ‚Üí b) ‚Üí f b
(<&>) = flip (<$>)
{-# INLINE (<&>) #-}
infixr 5 <&>

-- See README.md
(|?|) ‚à∑ a ‚Üí a ‚Üí (Bool ‚Üí a)
(|?|) = flip bool
{-# INLINE (|?|) #-}
infixl 2 |?|

-- See README.md
(?) ‚à∑ Bool ‚Üí a ‚Üí a ‚Üí a
(?) True  x _ = x
(?) False _ y = y
{-# INLINE (?) #-}
infixl 1 ?

-- See README.md
(‚ãÑ) ‚à∑ Monoid a ‚áí a ‚Üí a ‚Üí a
(‚ãÑ) = (<>)
{-# INLINE (‚ãÑ) #-}
infixr 6 ‚ãÑ


-- Kinda like a `guard`.
-- Consider this example: `\x ‚Üí x <$ guard (x ‚â† "")`
-- it could be replaced with: `ifMaybe (‚â† "")`.
-- Protects value with some condition and returns either value wrapped by `Just`
-- or `Nothing` if value isn't satisfies condition.
ifMaybe ‚à∑ (a ‚Üí Bool) ‚Üí a ‚Üí Maybe a
ifMaybe f x = if f x then Just x else Nothing
{-# INLINE ifMaybe #-}

-- Monadic version of `ifMaybe`.
-- Consider this example: `ifMaybe (‚â† "") <$> getLine`
-- it could be replaced with: `ifMaybeM (‚â† "") getLine`.
-- Guards value inside a monad, returns monad of `Maybe`.
ifMaybeM ‚à∑ Monad m ‚áí (a ‚Üí Bool) ‚Üí m a ‚Üí m (Maybe a)
ifMaybeM f m = m >>= (\x ‚Üí return $ if f x then Just x else Nothing)
{-# INLINE ifMaybeM #-}

-- Like `ifMaybeM` but instead of predicate function just takes `Bool`.
-- So `ifMaybeM (const True) getLine` could be replaced with `ifMaybeM' True getLine`.
ifMaybeM' ‚à∑ Monad m ‚áí Bool ‚Üí m a ‚Üí m (Maybe a)
ifMaybeM' condition m = if condition then Just <$> m else return Nothing
{-# INLINE ifMaybeM' #-}


-- Gets a transformer function, a flag and a value.
-- Returns transformed value if flag is `True` otherwise returns original value.
applyIf ‚à∑ (a ‚Üí a) ‚Üí Bool ‚Üí a ‚Üí a
applyIf = (|?| id)
{-# INLINE applyIf #-}

-- Negative version of `applyIf`
applyUnless ‚à∑ (a ‚Üí a) ‚Üí Bool ‚Üí a ‚Üí a
applyUnless = (id |?|)
{-# INLINE applyUnless #-}


dupe ‚à∑ a ‚Üí (a, a)
dupe x = (x, x)
{-# INLINE dupe #-}


hexStr ‚à∑ ByteString ‚Üí String
hexStr = BS.unpack >=> printf "%02x"
{-# INLINE hexStr #-}


-- Custom implementation to return `{}` (empty object) instead of empty string
-- when constructor have no fields.
myToJSON ‚à∑ (Generic a, GToJSON Zero (Rep a)) ‚áí a ‚Üí Value
myToJSON = f ‚Ä¢ (\x ‚Üí if x ‚â° "" then emptyObject else x)
  where f = genericToJSON defaultOptions { sumEncoding            = UntaggedValue
                                         , allNullaryToStringTag  = False
                                         , constructorTagModifier = const ""
                                         }
